//===- IntrinsicConversion.h ------------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains a mapping between equivalent intrinsics, to allow
// automatic widening of vector operations in the Revectorizer pass. The
// equivalences are generated by testing intrinsics on various inputs.
//
//===----------------------------------------------------------------------===//

#include "llvm/ADT/DenseMap.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/IR/Intrinsics.h"

#ifndef LLVM_TRANSFORMS_VECTORIZE_REVECTORIZER_INTRINSICCONVERSION_H
#define LLVM_TRANSFORMS_VECTORIZE_REVECTORIZER_INTRINSICCONVERSION_H

namespace llvm {
namespace revectorizer {

typedef std::pair<int, Intrinsic::ID> WideningTarget;

static SmallDenseMap<unsigned, std::vector<WideningTarget>> intrinsicWideningMap;

static void initializeIntrinsicWideningMap() {
{%- for base_key, targets in lane_widening_conversions|sort %}
    intrinsicWideningMap.try_emplace(Intrinsic::{{ base_key }}, std::vector<WideningTarget>({
        {%- for VF, target_key in targets|sort %}
        { {{ VF }}, Intrinsic::{{ target_key }}}{{ ", " if not loop.last }}
        {%- endfor -%}
    }));
{%- endfor %}
}

} // end namespace revectorizer
} // end namespace llvm

#endif // LLVM_TRANSFORMS_VECTORIZE_REVECTORIZER_INTRINSICCONVERSION_H